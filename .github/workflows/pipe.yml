name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  MODE: ${{ github.ref_name }}
  ECR_REPOSITORY: jface-personal

jobs:
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Download Go modules
        run: go mod download

      - name: Run Go unit tests
        run: go test ./... -v
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    env:
      ECS_SERVICE: ${{secrets.AWS_ECS_SERVICE}}

    steps:
      - name: Check vars
        run: |
          echo "app mode is set to ${{github.ref_name}}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" . \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --build-arg AWS_REGION=${{ env.AWS_REGION }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --build-arg VERSION=${{ github.sha }} \
            --build-arg MODE=${{ env.MODE }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          echo "$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}" > image.txt

      - name: Upload image artifact #have to store image as an artifact b/c github flags the output as a secret and skips it
        uses: actions/upload-artifact@v4
        with:
          name: image
          path: image.txt

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    env:
      ECS_SERVICE: ${{secrets.AWS_ECS_SERVICE}}
      ECS_CLUSTER: ${{secrets.AWS_ECS_CLUSTER }}
      ECS_TASK_DEFINITION: ${{ '.aws/jonathanface_task.json' }}
      CONTAINER_NAME: ${{ 'jface-personal' }}
  
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: image

      - name: Extract image name
        run: |
          echo "IMAGE=$(cat image.txt)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: debug image env
        run: |
          echo "env image name: ${{env.IMAGE}}"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{env.IMAGE }}
        

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true